package com.deltek.integration.maconomy.custom;

import java.util.function.Function;

import com.deltek.integration.maconomy.client.MaconomyClient;
import com.deltek.integration.maconomy.containers.v1.CardTableData;
import com.deltek.integration.maconomy.containers.v1.CardTableRecord;
import com.deltek.integration.maconomy.containers.v1.Container;
import com.deltek.integration.maconomy.containers.v1.FilterData;
import com.deltek.integration.maconomy.containers.v1.FilterRecord;

/**
 * AUTO-GENERATED IMPLEMENTATION OF THE "NOTES" CONTAINER. DO NOT EDIT THIS FILE
 * BY HAND!
 */
public class Notes
extends BaseContainer
implements IHasFilter<Notes.Filter>,
           IHasCard<Notes.Card>,
           IInsertAction<Container, Notes.Card.InitRecord> {

	public Notes(final MaconomyClient client) {
		super(client, "Notes");
	}

	@Override
	public Function<FilterData, Notes.Filter> getFilterCtorFn() {
		return data -> new Notes.Filter(this, data);
	}

	@Override
	public Function<CardTableData, Notes.Card> getCardCtorFn() {
		return data -> new Notes.Card(this, data);
	}

	@Override
	public Function<CardTableRecord, Notes.Card.InitRecord> getInitRecordCtorFn() {
		return data -> new Notes.Card.InitRecord(this, data);
	}

	public static class Card
	extends BaseCardPane<Notes.Card.InitRecord, Notes.Card.Record> {

		private Card(final IHasClient clientProvider,
			         final CardTableData cardTableData) {
			super(clientProvider, cardTableData,
				  record -> new Notes.Card.InitRecord(clientProvider, record),
				  record -> new Notes.Card.Record(clientProvider, record));
		}

		public static class InitRecord extends BaseRecord<CardTableRecord> implements IInitRecord {

			private InitRecord(final IHasClient clientProvider,
					           final CardTableRecord cardTableRecord) {
				super(clientProvider, cardTableRecord);
			}

		}

		public static class Record extends BaseRecord<CardTableRecord> implements IRecord {

			private Record(final IHasClient clientProvider,
			               final CardTableRecord cardTableRecord) {
				super(clientProvider, cardTableRecord);
			}

			public RWStringField noteNumber() {
				return new RWStringField(getContext().getData(), "notenumber");
			}

		}
	}

	public static class Filter
	extends BaseFilterPane<Notes.Filter.InitRecord, Notes.Filter.Record>
	implements IFilter<Notes.Filter.InitRecord, Notes.Filter.Record>  {

		private Filter(final IHasClient clientProvider,
				       final FilterData data) {
			super(clientProvider,
				  data,
				  record -> new Notes.Filter.InitRecord(clientProvider, record),
			      record -> new Notes.Filter.Record(clientProvider, record));
		}

		public static class InitRecord extends BaseRecord<FilterRecord> implements IInitRecord {

			private InitRecord(final IHasClient clientProvider,
			                   final FilterRecord filterRecord) {
				super(clientProvider, filterRecord);
 		    }

		}

		public static class Record extends BaseRecord<FilterRecord> implements IRecord {

			private Record(final IHasClient clientProvider,
		                   final FilterRecord filterRecord) {
				super(clientProvider, filterRecord);
			}

			public RStringField noteNumber() {
				return new RStringField(getContext().getData(), "notenumber");
			}

		}
	}

}
